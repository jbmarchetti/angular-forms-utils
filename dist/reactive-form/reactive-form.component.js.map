{"version":3,"file":"reactive-form.component.js","sourceRoot":"","sources":["../../src/reactive-form/reactive-form.component.ts"],"names":[],"mappings":"OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAqB,MAAM,EAAE,MAAM,eAAe;OAClF,EAAa,WAAW,EAAE,UAAU,EAAE,MAAM,gBAAgB;AAGnE;IAWE;QATC,WAAM,GAAU,EAAE,CAAA;QAOZ,WAAM,GAAU,EAAE,CAAC,CAAC,oCAAoC;QAG7D,IAAI,CAAC,SAAS,GAAG,IAAI,YAAY,CAAU,IAAI,CAAC,CAAA;IAClD,CAAC;IACD,wCAAQ,GAAR;QAAA,iBAcC;QAZC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAU;YAE7B,IAAI,OAAO,GAAgB,IAAI,WAAW,CAAC,EAAE,CAAC,CAAA;YAC9C,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;gBACjB,OAAO,CAAC,aAAa,CAAM,UAAU,CAAC,QAAQ,CAAC,CAAA;YAEjD,KAAK,CAAC,OAAO,GAAG,OAAO,CAAA;YAEvB,KAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,EAAE,OAAO,CAAC,CAAA;QACzC,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC3B,CAAC;IAGI,gCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,kBAAkB;oBAC5B,WAAW,EAAE,gCAAgC;iBAC9C,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,oCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,oCAAc,GAA2C;QAChE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC5B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KAC/B,CAAC;IACF,4BAAC;AAAD,CAAC,AA9CD,IA8CC","sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n\nexport class ReactiveFormComponent implements OnInit {\n\n   fields: any[] = []\n   form: FormGroup; // our model driven form\n   request: any; // our model driven form\n\n   afterInit: EventEmitter<boolean>\n\n  public submitted: boolean; // keep track on whether form is submitted\n  public events: any[] = []; // use later to display form changes\n\n  constructor() {\n    this.afterInit = new EventEmitter<boolean>(true)\n  }\n  ngOnInit(): void {\n\n    this.fields.forEach((field: any) => {\n\n      let control: FormControl = new FormControl('')\n      if (field.required)\n        control.setValidators(<any>Validators.required)\n\n      field.control = control\n\n      this.form.addControl(field.id, control)\n    })\n\n    this.afterInit.next(true)\n  }\n\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'tw-reactive-form',\n  templateUrl: './reactive-form.component.html'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fields': [{ type: Input },],\n'form': [{ type: Input },],\n'request': [{ type: Input },],\n'afterInit': [{ type: Output },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}